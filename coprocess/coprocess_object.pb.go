// Code generated by protoc-gen-go.
// source: coprocess_object.proto
// DO NOT EDIT!

package coprocess

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Object struct {
	HookType HookType           `protobuf:"varint,1,opt,name=hook_type,json=hookType,enum=coprocess.HookType" json:"hook_type,omitempty"`
	HookName string             `protobuf:"bytes,2,opt,name=hook_name,json=hookName" json:"hook_name,omitempty"`
	Request  *MiniRequestObject `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	Session  *SessionState      `protobuf:"bytes,4,opt,name=session" json:"session,omitempty"`
	Metadata map[string]string  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Spec     map[string]string  `protobuf:"bytes,6,rep,name=spec" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Object) GetRequest() *MiniRequestObject {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Object) GetSession() *SessionState {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *Object) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSpec() map[string]string {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterType((*Object)(nil), "coprocess.Object")
}

var fileDescriptor2 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xd9, 0xba, 0x75, 0xeb, 0x13, 0x45, 0xa2, 0x68, 0xe8, 0x14, 0x87, 0x5e, 0x3c, 0x55,
	0x9d, 0xa0, 0xe2, 0xce, 0x82, 0x97, 0x29, 0xa4, 0xde, 0x4b, 0x56, 0x03, 0xab, 0xb3, 0x49, 0x6d,
	0x32, 0xa1, 0xff, 0x90, 0x7f, 0xa7, 0x59, 0x92, 0x76, 0x1d, 0x9e, 0xbc, 0x94, 0xbc, 0x7c, 0xdf,
	0xef, 0x7b, 0x7d, 0x2f, 0x70, 0x94, 0x8a, 0xa2, 0x14, 0x29, 0x93, 0x32, 0x11, 0xf3, 0x0f, 0x96,
	0xaa, 0x48, 0x97, 0x4a, 0xa0, 0xa0, 0xb9, 0x0f, 0x2f, 0x36, 0x96, 0x3c, 0xe3, 0x59, 0x52, 0xb2,
	0xaf, 0x15, 0x93, 0x6a, 0xcb, 0x1f, 0x9e, 0x6e, 0x4c, 0x52, 0x7f, 0x32, 0xc1, 0x13, 0xa9, 0xa8,
	0x62, 0x4e, 0x6e, 0xb5, 0x49, 0x45, 0x9e, 0x0b, 0x6e, 0xef, 0xcf, 0x7f, 0x3c, 0xf0, 0x5f, 0x4d,
	0x0e, 0xba, 0x86, 0x60, 0x21, 0xc4, 0x32, 0x51, 0x55, 0xc1, 0x70, 0x67, 0xdc, 0xb9, 0xdc, 0x9b,
	0x1c, 0x44, 0x0d, 0x16, 0x3d, 0x6b, 0xed, 0x4d, 0x4b, 0x64, 0xb8, 0x70, 0x27, 0x34, 0x72, 0x04,
	0xa7, 0x39, 0xc3, 0x5d, 0x4d, 0x04, 0x56, 0x7c, 0xd1, 0x35, 0xba, 0x83, 0x81, 0xfb, 0x51, 0xec,
	0x69, 0x69, 0x67, 0x72, 0xd2, 0x0a, 0x9b, 0xe9, 0x39, 0x88, 0x55, 0x6d, 0x77, 0x52, 0x9b, 0xd1,
	0x0d, 0x0c, 0xdc, 0x00, 0xb8, 0x67, 0xb8, 0xe3, 0x16, 0x17, 0x5b, 0x25, 0x5e, 0x4f, 0x46, 0x6a,
	0x1f, 0x9a, 0xc2, 0x30, 0x67, 0x8a, 0xbe, 0x53, 0x45, 0x71, 0x7f, 0xec, 0x69, 0xe6, 0xac, 0xc5,
	0xd8, 0x06, 0xd1, 0xcc, 0x39, 0x9e, 0xb8, 0x2a, 0x2b, 0xd2, 0x00, 0xe8, 0x0a, 0x7a, 0xb2, 0x60,
	0x29, 0xf6, 0x0d, 0x38, 0xfa, 0x0b, 0xc6, 0x5a, 0xb5, 0x90, 0x31, 0x86, 0x53, 0xd8, 0xdd, 0xca,
	0x42, 0xfb, 0xe0, 0x2d, 0x59, 0x65, 0x56, 0x16, 0x90, 0xf5, 0x11, 0x1d, 0x42, 0xff, 0x9b, 0x7e,
	0xae, 0xea, 0xa5, 0xd8, 0xe2, 0xb1, 0xfb, 0xd0, 0x09, 0xef, 0x21, 0x68, 0xf2, 0xfe, 0x03, 0xce,
	0x7d, 0xf3, 0x5e, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0x7b, 0x8f, 0xfc, 0x30, 0x02,
	0x00, 0x00,
}
