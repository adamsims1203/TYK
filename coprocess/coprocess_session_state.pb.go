// Code generated by protoc-gen-go.
// source: coprocess_session_state.proto
// DO NOT EDIT!

package coprocess

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AccessSpec struct {
	Url     string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Methods []string `protobuf:"bytes,2,rep,name=methods" json:"methods,omitempty"`
}

func (m *AccessSpec) Reset()                    { *m = AccessSpec{} }
func (m *AccessSpec) String() string            { return proto.CompactTextString(m) }
func (*AccessSpec) ProtoMessage()               {}
func (*AccessSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type AccessDefinition struct {
	ApiName     string        `protobuf:"bytes,1,opt,name=api_name,json=apiName" json:"api_name,omitempty"`
	ApiId       string        `protobuf:"bytes,2,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	Versions    []string      `protobuf:"bytes,3,rep,name=versions" json:"versions,omitempty"`
	AllowedUrls []*AccessSpec `protobuf:"bytes,4,rep,name=allowed_urls,json=allowedUrls" json:"allowed_urls,omitempty"`
}

func (m *AccessDefinition) Reset()                    { *m = AccessDefinition{} }
func (m *AccessDefinition) String() string            { return proto.CompactTextString(m) }
func (*AccessDefinition) ProtoMessage()               {}
func (*AccessDefinition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *AccessDefinition) GetAllowedUrls() []*AccessSpec {
	if m != nil {
		return m.AllowedUrls
	}
	return nil
}

type BasicAuthData struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *BasicAuthData) Reset()                    { *m = BasicAuthData{} }
func (m *BasicAuthData) String() string            { return proto.CompactTextString(m) }
func (*BasicAuthData) ProtoMessage()               {}
func (*BasicAuthData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type JWTData struct {
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *JWTData) Reset()                    { *m = JWTData{} }
func (m *JWTData) String() string            { return proto.CompactTextString(m) }
func (*JWTData) ProtoMessage()               {}
func (*JWTData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type Monitor struct {
	TriggerLimits []float64 `protobuf:"fixed64,1,rep,packed,name=trigger_limits,json=triggerLimits" json:"trigger_limits,omitempty"`
}

func (m *Monitor) Reset()                    { *m = Monitor{} }
func (m *Monitor) String() string            { return proto.CompactTextString(m) }
func (*Monitor) ProtoMessage()               {}
func (*Monitor) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

type SessionState struct {
	LastCheck               int64                        `protobuf:"varint,1,opt,name=last_check,json=lastCheck" json:"last_check,omitempty"`
	Allowance               float64                      `protobuf:"fixed64,2,opt,name=allowance" json:"allowance,omitempty"`
	Rate                    float64                      `protobuf:"fixed64,3,opt,name=rate" json:"rate,omitempty"`
	Per                     float64                      `protobuf:"fixed64,4,opt,name=per" json:"per,omitempty"`
	Expires                 int64                        `protobuf:"varint,5,opt,name=expires" json:"expires,omitempty"`
	QuotaMax                int64                        `protobuf:"varint,6,opt,name=quota_max,json=quotaMax" json:"quota_max,omitempty"`
	QuotaRenews             int64                        `protobuf:"varint,7,opt,name=quota_renews,json=quotaRenews" json:"quota_renews,omitempty"`
	QuotaRemaining          int64                        `protobuf:"varint,8,opt,name=quota_remaining,json=quotaRemaining" json:"quota_remaining,omitempty"`
	QuotaRenewalRate        int64                        `protobuf:"varint,9,opt,name=quota_renewal_rate,json=quotaRenewalRate" json:"quota_renewal_rate,omitempty"`
	AccessRights            map[string]*AccessDefinition `protobuf:"bytes,10,rep,name=access_rights,json=accessRights" json:"access_rights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	OrgId                   string                       `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	OauthClientId           string                       `protobuf:"bytes,12,opt,name=oauth_client_id,json=oauthClientId" json:"oauth_client_id,omitempty"`
	OauthKeys               map[string]string            `protobuf:"bytes,13,rep,name=oauth_keys,json=oauthKeys" json:"oauth_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BasicAuthData           *BasicAuthData               `protobuf:"bytes,14,opt,name=basic_auth_data,json=basicAuthData" json:"basic_auth_data,omitempty"`
	JwtData                 *JWTData                     `protobuf:"bytes,15,opt,name=jwt_data,json=jwtData" json:"jwt_data,omitempty"`
	HmacEnabled             bool                         `protobuf:"varint,16,opt,name=hmac_enabled,json=hmacEnabled" json:"hmac_enabled,omitempty"`
	HmacSecret              string                       `protobuf:"bytes,17,opt,name=hmac_secret,json=hmacSecret" json:"hmac_secret,omitempty"`
	IsInactive              bool                         `protobuf:"varint,18,opt,name=is_inactive,json=isInactive" json:"is_inactive,omitempty"`
	ApplyPolicyId           string                       `protobuf:"bytes,19,opt,name=apply_policy_id,json=applyPolicyId" json:"apply_policy_id,omitempty"`
	DataExpires             int64                        `protobuf:"varint,20,opt,name=data_expires,json=dataExpires" json:"data_expires,omitempty"`
	Monitor                 *Monitor                     `protobuf:"bytes,21,opt,name=monitor" json:"monitor,omitempty"`
	EnableDetailedRecording bool                         `protobuf:"varint,22,opt,name=enable_detailed_recording,json=enableDetailedRecording" json:"enable_detailed_recording,omitempty"`
	Metadata                string                       `protobuf:"bytes,23,opt,name=metadata" json:"metadata,omitempty"`
	Tags                    []string                     `protobuf:"bytes,24,rep,name=tags" json:"tags,omitempty"`
	Alias                   string                       `protobuf:"bytes,25,opt,name=alias" json:"alias,omitempty"`
}

func (m *SessionState) Reset()                    { *m = SessionState{} }
func (m *SessionState) String() string            { return proto.CompactTextString(m) }
func (*SessionState) ProtoMessage()               {}
func (*SessionState) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *SessionState) GetAccessRights() map[string]*AccessDefinition {
	if m != nil {
		return m.AccessRights
	}
	return nil
}

func (m *SessionState) GetOauthKeys() map[string]string {
	if m != nil {
		return m.OauthKeys
	}
	return nil
}

func (m *SessionState) GetBasicAuthData() *BasicAuthData {
	if m != nil {
		return m.BasicAuthData
	}
	return nil
}

func (m *SessionState) GetJwtData() *JWTData {
	if m != nil {
		return m.JwtData
	}
	return nil
}

func (m *SessionState) GetMonitor() *Monitor {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessSpec)(nil), "coprocess.AccessSpec")
	proto.RegisterType((*AccessDefinition)(nil), "coprocess.AccessDefinition")
	proto.RegisterType((*BasicAuthData)(nil), "coprocess.BasicAuthData")
	proto.RegisterType((*JWTData)(nil), "coprocess.JWTData")
	proto.RegisterType((*Monitor)(nil), "coprocess.Monitor")
	proto.RegisterType((*SessionState)(nil), "coprocess.SessionState")
}

func init() { proto.RegisterFile("coprocess_session_state.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x97, 0xeb, 0x26, 0xf6, 0x8d, 0xed, 0x24, 0x5d, 0x92, 0x76, 0x93, 0x52, 0xd1, 0x5a, 0xa2,
	0x14, 0xa9, 0x44, 0x10, 0x5e, 0xa2, 0x0a, 0x09, 0x4a, 0x93, 0x87, 0x02, 0x2d, 0xe8, 0x02, 0xe2,
	0x05, 0x69, 0xb5, 0xb9, 0x5b, 0xec, 0x25, 0xe7, 0xbb, 0xe3, 0x76, 0xf3, 0xc7, 0x5f, 0x85, 0xef,
	0xc7, 0xf7, 0x60, 0x66, 0x76, 0xcf, 0xbe, 0x28, 0xf4, 0xe5, 0xb4, 0xf3, 0x9b, 0xdf, 0xcc, 0xcd,
	0xce, 0xfc, 0x76, 0xe0, 0x49, 0x56, 0xd5, 0x4d, 0x95, 0x19, 0xe7, 0x94, 0xc3, 0x8f, 0xad, 0x4a,
	0xe5, 0xbc, 0xf6, 0xe6, 0x10, 0x51, 0x5f, 0x89, 0x64, 0xe5, 0x9e, 0x1e, 0x03, 0xbc, 0xce, 0xe8,
	0x74, 0x56, 0x9b, 0x4c, 0xec, 0x40, 0xff, 0xb2, 0x29, 0x64, 0xef, 0x69, 0xef, 0x45, 0x92, 0xd2,
	0x51, 0x48, 0x18, 0x2c, 0x8c, 0x9f, 0x57, 0xb9, 0x93, 0xf7, 0x9e, 0xf6, 0x11, 0x6d, 0xcd, 0xe9,
	0x3f, 0x3d, 0xd8, 0x09, 0xa1, 0x27, 0xe6, 0x4f, 0x5b, 0x5a, 0x8f, 0x7f, 0x11, 0xfb, 0x30, 0xd4,
	0xb5, 0x55, 0xa5, 0x5e, 0x98, 0x98, 0x65, 0x80, 0xf6, 0x7b, 0x34, 0xc5, 0x1e, 0x6c, 0x92, 0xcb,
	0xe6, 0x98, 0x88, 0x1c, 0x1b, 0x68, 0xbd, 0xcd, 0xc5, 0x01, 0x0c, 0xaf, 0x4c, 0x43, 0x25, 0x3a,
	0xd9, 0xe7, 0x3f, 0xac, 0x6c, 0x71, 0x0c, 0x63, 0x5d, 0x14, 0xd5, 0xb5, 0xc9, 0x15, 0xd6, 0xe2,
	0xe4, 0x7d, 0xf4, 0x8f, 0x8e, 0xf6, 0x0e, 0x57, 0xe5, 0x1f, 0xae, 0x6b, 0x4f, 0x47, 0x91, 0xfa,
	0x1b, 0x32, 0xa7, 0xdf, 0xc2, 0xe4, 0x7b, 0xed, 0x6c, 0xf6, 0xfa, 0xd2, 0xcf, 0x4f, 0xb4, 0xd7,
	0xf4, 0x9b, 0x5a, 0x3b, 0x77, 0x5d, 0x35, 0x79, 0x2c, 0x6c, 0x65, 0x0b, 0x01, 0xf7, 0xe7, 0xda,
	0xcd, 0x63, 0x5d, 0x7c, 0x9e, 0x3e, 0x83, 0xc1, 0x0f, 0xbf, 0xff, 0xca, 0xa1, 0x0f, 0x61, 0xd3,
	0x99, 0xac, 0x31, 0x3e, 0x06, 0x46, 0x6b, 0xfa, 0x25, 0x0c, 0xde, 0x55, 0x78, 0xef, 0xaa, 0x11,
	0x9f, 0xc2, 0x96, 0x6f, 0xec, 0x6c, 0x66, 0x1a, 0x55, 0xd8, 0x85, 0xf5, 0x0e, 0xa9, 0xfd, 0x17,
	0xbd, 0x74, 0x12, 0xd1, 0x9f, 0x18, 0x9c, 0xfe, 0x3b, 0x84, 0xf1, 0x59, 0x98, 0xc7, 0x19, 0x8d,
	0x43, 0x3c, 0x01, 0x28, 0xb4, 0xf3, 0x2a, 0x9b, 0x9b, 0xec, 0x82, 0xd3, 0xf7, 0xd3, 0x84, 0x90,
	0x37, 0x04, 0x88, 0x8f, 0x21, 0xe1, 0x4b, 0xe9, 0x32, 0x33, 0x5c, 0x5d, 0x2f, 0x5d, 0x03, 0x54,
	0x76, 0x83, 0x49, 0xb0, 0x6b, 0xe4, 0xe0, 0x33, 0x0d, 0xb0, 0x36, 0x0d, 0x36, 0x8a, 0x20, 0x3a,
	0xd2, 0x00, 0xcd, 0x4d, 0x6d, 0x1b, 0xe3, 0xe4, 0x06, 0xe7, 0x6f, 0x4d, 0xf1, 0x18, 0x92, 0xbf,
	0x2f, 0x2b, 0xaf, 0xd5, 0x42, 0xdf, 0xc8, 0x4d, 0xf6, 0x0d, 0x19, 0x78, 0xa7, 0x6f, 0xc4, 0x33,
	0x18, 0x07, 0x67, 0x63, 0x4a, 0x73, 0xed, 0xe4, 0x80, 0xfd, 0x23, 0xc6, 0x52, 0x86, 0xc4, 0x67,
	0xb0, 0xdd, 0x52, 0x16, 0x1a, 0x05, 0x50, 0xce, 0xe4, 0x90, 0x59, 0x5b, 0x91, 0x15, 0x51, 0xf1,
	0x12, 0x44, 0x27, 0x97, 0x2e, 0x14, 0x97, 0x9d, 0x30, 0x77, 0x67, 0x9d, 0x51, 0x17, 0x29, 0x5d,
	0xe1, 0x3d, 0x4c, 0x34, 0x4f, 0x55, 0x61, 0xef, 0xe6, 0xd8, 0x4a, 0xe0, 0xa9, 0x7f, 0xde, 0x99,
	0x7a, 0xb7, 0x87, 0x51, 0x02, 0x29, 0x73, 0x4f, 0x4b, 0xdf, 0x2c, 0xd3, 0xb1, 0xee, 0x40, 0xa4,
	0xbb, 0xaa, 0x99, 0x91, 0xee, 0x46, 0x41, 0x77, 0x68, 0xa1, 0xee, 0x9e, 0xc3, 0x76, 0xa5, 0x51,
	0x1d, 0x2a, 0x2b, 0xac, 0x29, 0x3d, 0xf9, 0xc7, 0xec, 0x9f, 0x30, 0xfc, 0x86, 0x51, 0xe4, 0x9d,
	0x02, 0x04, 0xde, 0x85, 0x59, 0x3a, 0x39, 0xe1, 0x5a, 0x9e, 0x7f, 0xa8, 0x96, 0x9f, 0x89, 0xf9,
	0x23, 0x12, 0x43, 0x21, 0x49, 0xd5, 0xda, 0xe2, 0x3b, 0xd8, 0x3e, 0x27, 0x41, 0x2a, 0xce, 0x95,
	0xa3, 0xae, 0xe4, 0x16, 0xfe, 0x6e, 0x74, 0x24, 0x3b, 0xb9, 0x6e, 0x49, 0x36, 0x9d, 0x9c, 0xdf,
	0x52, 0xf0, 0x17, 0x30, 0xfc, 0xeb, 0xda, 0x87, 0xd0, 0x6d, 0x0e, 0x15, 0x9d, 0xd0, 0x28, 0xd6,
	0x74, 0x80, 0x1c, 0xa6, 0xe3, 0x00, 0xe7, 0x0b, 0x9d, 0x29, 0x53, 0xea, 0xf3, 0xc2, 0xe4, 0x72,
	0x07, 0x43, 0x86, 0xe9, 0x88, 0xb0, 0xd3, 0x00, 0x89, 0x4f, 0x80, 0x4d, 0x15, 0xd5, 0xfd, 0x80,
	0xaf, 0x0f, 0x04, 0x9d, 0x31, 0x42, 0x04, 0xeb, 0x94, 0x2d, 0x75, 0xe6, 0xed, 0x95, 0x91, 0x82,
	0x53, 0x80, 0x75, 0x6f, 0x23, 0x42, 0x4d, 0xd4, 0x75, 0x5d, 0x2c, 0x55, 0x5d, 0x15, 0x36, 0x5b,
	0x52, 0x13, 0x3f, 0x0a, 0x4d, 0x64, 0xf8, 0x17, 0x46, 0xb1, 0x89, 0x58, 0x0c, 0xd5, 0xad, 0x5a,
	0x25, 0xee, 0x06, 0x35, 0x11, 0x76, 0x1a, 0xd5, 0xf8, 0x12, 0x17, 0x4d, 0x78, 0x4d, 0x72, 0xef,
	0xce, 0xed, 0xe2, 0x3b, 0x4b, 0x5b, 0x8a, 0x78, 0x05, 0xfb, 0xe1, 0x62, 0x2a, 0x37, 0x5e, 0x5b,
	0xbc, 0x0d, 0x8a, 0x2b, 0xc3, 0xc7, 0x4c, 0x2a, 0x7c, 0xc8, 0x75, 0x3e, 0x0a, 0x84, 0x93, 0xe8,
	0x4f, 0x5b, 0x37, 0xad, 0x02, 0xdc, 0x61, 0x9a, 0x1b, 0xf9, 0x28, 0xac, 0x82, 0xd6, 0xa6, 0x37,
	0xe5, 0xf5, 0xcc, 0x49, 0xc9, 0x9b, 0x88, 0xcf, 0x62, 0x17, 0x36, 0x74, 0x61, 0xb5, 0x93, 0xfb,
	0x71, 0x6f, 0x91, 0x71, 0xf0, 0x07, 0x3c, 0xb8, 0xa3, 0x3c, 0x7a, 0x7e, 0x28, 0x93, 0x76, 0x7f,
	0xe2, 0x51, 0x7c, 0x05, 0x1b, 0x57, 0xba, 0xb8, 0x0c, 0xcf, 0x77, 0x74, 0xf4, 0xf8, 0xce, 0xee,
	0x5a, 0x2f, 0xcf, 0x34, 0x30, 0x5f, 0xdd, 0x3b, 0xee, 0x1d, 0x7c, 0x03, 0x5b, 0xb7, 0xb5, 0xf4,
	0x3f, 0xa9, 0x77, 0xbb, 0xa9, 0x93, 0x4e, 0xf4, 0xf9, 0x26, 0xaf, 0xf9, 0xaf, 0xff, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x12, 0xec, 0xee, 0x80, 0x07, 0x06, 0x00, 0x00,
}
